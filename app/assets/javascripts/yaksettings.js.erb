var yakfunc, yakapp;

yakapp = {
	mapStyles: [],
	domColor: '#02253E',
	subColor: '#0177A8'
};
yakfunc = {
	/* Displays browser notification */
	notify: function(content,tags,title, url){
		if(window.webkitNotifications){
			var havePermission = window.webkitNotifications.checkPermission();
			if (havePermission == 0) {
				var notification = window.webkitNotifications.createNotification("<%= asset_url 'favicon.png' %>",title,content);
				notification.onclick = function () {
					window.open(url);
					notification.close();
				}
				notification.show();
				setTimeout(function() {
					notification.cancel();
				}, 2500)
			} else {
				window.webkitNotifications.requestPermission();
			}
		} else {
			if (Notification && Notification.permission === "granted") {
				var notification = new Notification(content, {tag: tags });
				setTimeout(function() {
					notification.close();
				}, 3000)
			} else if (Notification && Notification.permission !== 'denied') {
				Notification.requestPermission(function (permission) {
					if(!('permission' in Notification)) {
						Notification.permission = permission;
					}
					if (permission === "granted") {
						var notification = new Notification(content, {tag: tags});
						setTimeout(function() {
							notification.close();
						}, 3000)
					}
				});
			}
		}
	},
	/* Default formating for grunt display; used in range infowindows, AJAXed grunts on herd#show, SSE render */
	messageDisplay: function(info){
		return '<li><div class="message"><div class="yak" data-userid="' + info.user_id + '" data-date="' + info.created_at + '" style="background:' + info.user_color + '">' + info.user_name + '</div><div class="message-content"><p>' + info.message + '<span class="time-ago"> ' + info.time_ago +' ago</span></p><span class="tab"></span></div></div></li>'
	},
	/* Determines if browser supports SVG */
	supportssvg: function() {
		if (document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Image", "1.1")) {
			return true;
		} else {
			return false;
		}
	},
	/* Pass image to use either .svg or fallback .png */
	useSVG: function(item) {
		if (!yakfunc.supportssvg) {
			return item + '.png';
		} else {
			return item + '.svg';
		}
	},
	/* Store variables in localStorage, like cookies */
	localStore: function(key, obj) {
		return localStorage[key] = JSON.stringify(obj);
	},
	/* Retrieve variables in localStorage, like cookies. Returns false if key does not exist */
	localRetrieve: function(key) {
		if (typeof localStorage[key] !== 'undefined') {
			return JSON.parse(localStorage[key]);
		} else {
			return false;
		}
	},
	/* Average-joe marker with window */
	customMarkerBubble: function(content, pos, map) {
		var customLocationMarker, customLocationWindow;
		customLocationWindow = new google.maps.InfoWindow({
			content: '<div class="hdr">' + '<div class="quick-view-hdr">' + '<strong>' + content + '</strong>' + '</div><!-- /hdr -->' + '<div class="grunts">' + '</div><!-- /grunts -->' + '<div class="quick-view-meta">' + '</div><!-- /meta -->' + '<button class="yak">Yaaak!</button>' + '</div><!-- /quick view -->'
		});
		customLocationMarker = new google.maps.Marker({
			position: pos,
			map: map,
			animation: google.maps.Animation.DROP,
			title: content
		});
		google.maps.event.addListener(customLocationMarker, 'click', function() {
			return customLocationWindow.open(map, customLocationMarker);
		});
		return customLocationMarker;
	},
	/* Marker that has a herd quick display in its infoWindow. Also has radius */
	customChatMarker: function(herddata, pos, map) {
		var customLocationMarker, customLocationWindow, herderstring, herd_radius;
		herderstring = '<div class="quick-view">' + '<div class="quick-view-hdr">' + '<strong>Herd</strong>' + '</div><!-- /hdr -->'
		herderstring += '<ul class="chat-list">'
		$.each(herddata.grunts, function(key, val){
				herderstring += yakfunc.messageDisplay(val)
		});
		herderstring += '</ul>'
		herderstring += '<div class="quick-view-meta">' + herddata.yak_length + ' Yaks / ' + herddata.grunt_length + ' Grunts / ' + herddata.herd_radius + ' Miles</div><!-- /meta -->' + '<a class="i-chats yaaak" href="/herds/' + herddata.id + '">Yaaak</a>' + '</div><!-- /quick view -->'

		customLocationMarker = new google.maps.Marker({
			position: pos,
			map: map,
			animation: google.maps.Animation.DROP,
		});
		customLocationWindow = new google.maps.InfoWindow({
			content: herderstring
		});
		google.maps.event.addListener(customLocationMarker, 'click', function() {
			return customLocationWindow.open(map, customLocationMarker);
		});
		herd_radius = new google.maps.Circle({
			map: map,
			radius: parseInt(herddata.herd_radius * 1609.34),
			fillColor: yakapp.domColor,
			fillOpacity: 0.15,
			strokeColor: yakapp.subColor,
			strokeOpacity: 0.5
		});
		herd_radius.bindTo('center', customLocationMarker, 'position');
		return customLocationMarker;
	},
	/* Add a marker for the current location */
	currentLocationMarker: function(map) {
		var currentPosition;
		currentPosition = new google.maps.LatLng(yakapp.position[0], yakapp.position[1]);
		return yakfunc.customMarkerBubble('Current Location', currentPosition, map);
	},
	/* Retrieve and set location with HTML5 API. Stores in yakapp.position as lat/lng array; also sets value on grunt input for geo lat/lng */
	updateLocation: function() {
		return navigator.geolocation.getCurrentPosition((function(position) {
			var gmapsPosition;
			yakapp.position = [position.coords.latitude, position.coords.longitude];
			$('#grunt_geo_long').val(position.coords.longitude)
			$('#grunt_geo_lat').val(position.coords.latitude)
			if($('body').hasClass('range')){
				gmapsPosition = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
				yakapp.rangemap.panTo(gmapsPosition);
			}
		}), function(error) {
			alert('Lone ranger, get back on the beaten trail. We can\'t locate you.');
		});
	}
};

/* Poll initially to determine if notifications supported by browser */
if(window.webkitNotifications){
	var havePermission = window.webkitNotifications.checkPermission();
	if (havePermission !== 0) {
 		window.webkitNotifications.requestPermission();
 	}
} else if (Notification && Notification !== "granted") {
	Notification.requestPermission(function(status) {
		if (Notification.permission !== status) {
			return Notification.permission = status;
		}
	});
}