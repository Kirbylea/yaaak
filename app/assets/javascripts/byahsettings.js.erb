/*** Byah API

	notify
		options
			type 		string 	'fallback'		'notification | alert'
			duration	int 	byahsettings.notification_delay

	browserNotification
		options		JSON
			content 	string 	'New notification'
			tags		string 	'yaaakap'
			title		string 	'Yaaak'
			url 		string 	window.location.href
		returns notification

	dropInAlert
		options		JSON
			title		string 	'Yo:'
			content 	string 	''
			severity	string 	'info'		'success | error | warn | info'
			persistent	boolean	false
		returns html alert

	supportssvg
		returns boolean

	useSVG
		imagepath	string
		returns image path with .png or .svg suffix

	localStore
		key			string
		obj			string
		returns localStorage store function

	localRetrive
		key			string
		returns obj; false on failure

	setDefault
		variable 	var
		value 		string/array/int/whatever
		returns variable if defined; value if undefined

	customMarkerBubble
		content 	string 				'Location'
		pos 		array(lat, lng)
		map 		google maps object
		sep_window 	boolean 			false
		returns google maps marker object

	currentLocationMarker
		map 		google maps object
		latlng 		array(lat, lng)		this.localRetrieve('position')
		returns google maps marker object

	updateLocation
		returns array(lat, lng); false on error

	googleLocation
		latlng 		array(lat, lng)
		returns pretty place name

	distanceBetween
		point1 		array(lat, lng)
		point2 		array(lat, lng)
		returns distance in rounded miles

***/


var byah, byahsettings;

byahsettings = {
	notification_delay: 3500
};
byah = {
		/* Displays browser notification */
	notify: function(options){

		options.duration = this.setDefault(options.duration, byahsettings.notification_delay)
		switch(options.type){
			case "notification" :
				this.browserNotification(options)
			break;
			case "alert" :
				this.dropInAlert(options)
			break;
			default :
				if(window.webkitNotifications || Notification) {
					this.browserNotification(options)
				} else {
					this.dropInAlert(options)
				}
		};
	},
	browserNotification: function(options){
		options.content = this.setDefault(options.content, 'New notification')
		options.tags = this.setDefault(options.tags, 'yaaakapp')
		options.title = this.setDefault(options.title, 'Yaaak')
		options.url = this.setDefault(options.url, window.location.href)

		if(window.webkitNotifications){
			var havePermission = window.webkitNotifications.checkPermission();
			if (havePermission == 0) {
				var notification = window.webkitNotifications.createNotification("<%= asset_url 'favicon.png' %>",options.title,options.content);
				notification.onclick = function () {
					window.open(url);
					notification.close();
				}
				notification.show();
				setTimeout(function() {
					notification.cancel();
				}, options.duration)
			} else {
				window.webkitNotifications.requestPermission();
			}
		} else {
			if (Notification && Notification.permission === "granted") {
				var notification = new Notification(options.content, {tag: options.tags });
				setTimeout(function() {
					notification.close();
				}, options.duration)
			} else if (Notification && Notification.permission !== 'denied') {
				Notification.requestPermission(function (permission) {
					if(!('permission' in Notification)) {
						Notification.permission = permission;
					}
					if (permission === "granted") {
						var notification = new Notification(options.content, {tag: options.tags});
						setTimeout(function() {
							notification.close();
						}, options.duration)
					}
				});
			}
		}
	},
	/* Normal HTML alert */
	dropInAlert: function(options){
		var alert;
		$('.alert').remove()

		options.content = this.setDefault(options.content, '')
		options.title = this.setDefault(options.title, '')
		options.severity = this.setDefault(options.severity, 'info')
		options.persistent = this.setDefault(options.persistent, false)

		alert = '<div class="alert animated bounceInDown ' + options.severity + '"><strong>' + options.title + '</strong>' + options.content + '</div>';

		$('body').append(alert)
		if(!options.persistent){
			setTimeout(function() {
				$('.alert').fadeOut();
			}, options.duration)
		}
	},
	/* Determines if browser supports SVG */
	supportssvg: function() {
		if (document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Image", "1.1")) {
			return true;
		} else {
			return false;
		}
	},
	/* Pass image to use either .svg or fallback .png */
	useSVG: function(imagepath) {
		if (!this.supportssvg) {
			return imagepath + '.png';
		} else {
			return imagepath + '.svg';
		}
	},
	/* Store variables in localStorage, like cookies */
	localStore: function(key, obj) {
		return localStorage[key] = JSON.stringify(obj);
	},
	/* Retrieve variables in localStorage, like cookies. Returns false if key does not exist */
	localRetrieve: function(key) {
		if (typeof localStorage[key] !== 'undefined') {
			return JSON.parse(localStorage[key]);
		} else {
			return false;
		}
	},
	/* Set default values for JS functions */
	setDefault: function(variable, value){
		return (typeof variable === 'undefined') ? value : variable;
	},
	/* Average-joe marker with window */
	customMarkerBubble: function(content, pos, map, sep_window) {
		var customLocationMarker, customMarkerBubble;

		content = this.setDefault(content, 'Location');
		separate_window = this.setDefault(separate_window, false)

		customLocationMarker = new google.maps.Marker({
			position: pos,
			map: map,
			animation: google.maps.Animation.DROP,
			title: content
		});
		if(separate_window){
			customLocationWindow = new google.maps.InfoWindow({
				content: content
			});
			google.maps.event.addListener(customLocationMarker, 'click', function() {
				return customLocationWindow.open(map, customLocationMarker);
			});
		} else {
			this.customLocationWindow = new google.maps.InfoWindow({
				content: content
			});
			google.maps.event.addListener(customLocationMarker, 'click', function() {
				return this.customLocationWindow.open(map, customLocationMarker);
			});
		}
		return customLocationMarker;
	},
	/* Add a marker for the current location */
	currentLocationMarker: function(map, latlng) {
		var currentPosition;

		latlng = location.setDefault(latlng, this.localRetrieve('position'))

		currentPosition = new google.maps.LatLng(latlng[0], latlng[1]);
		return this.customMarkerBubble('Current Location', currentPosition, map);
	},
	/* Retrieve and set location with HTML5 API. Stores in localStorage as position as lat/lng array; also sets value on grunt input for geo lat/lng */
	updateLocation: function() {
		return navigator.geolocation.getCurrentPosition((function(position) {
			this.localStore('position',[position.coords.latitude, position.coords.longitude]);
			return ([position.coords.latitude, position.coords.longitude])
		}), function(error) {
			switch(error.code){
				case error.PERMISSION_DENIED :
					this.notify({content:'Please turn on your geolocation'})
				break;
				case error.POSITION_UNAVAILABLE :
					this.notify({content:'Position unavailable'});
				break;
				default :
					this.notify({content:'Could not locate you'})
				break;
			}
			return false
		});
	},
	/* Location lookup to name herd */
	googleLocation: function(latlng){
		var googleLat, geocoder;

		latlng = this.setDefault(latlng, this.localRetrieve('position'))

		geocoder = new google.maps.Geocoder();
		googleLat = new google.maps.LatLng(latlng[0], latlng[1]);
		geocoder.geocode({'latLng': googleLat}, function(results, status) {
			if (status == google.maps.GeocoderStatus.OK) {
				if (results[1] && results[1].address_components[0]) {
					return results[1].address_components[0].long_name;
				} else {
					console.log('No results found');
				}
			} else {
				console.log('Geocoder failed due to: ' + status);
			}
		});
	},
	/* Calculate distance between two points */
	distanceBetween: function(point1, point2) {
		var R, dLat, dLon, a, c, d
		R = 3963.1676;
		dLat = this.deg2rad(point2[0]-point1[0]);
		dLon = this.deg2rad(point2[1]-point1[1]);
		a =
			Math.sin(dLat/2) * Math.sin(dLat/2) +
			Math.cos(this.deg2rad(point1[0])) * Math.cos(this.deg2rad(point2[0])) *
			Math.sin(dLon/2) * Math.sin(dLon/2)
		;
		c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
		d = R * c; // Distance in miles
		//return Math.round(d) <= 0 ? 'You\'re at the center' : Math.round(d)
		return Math.round(d)
	},
	/* Helper function for distanceBetween */
	deg2rad: function(deg) {
		return deg * (Math.PI/180)
	},
};

/* Poll initially to determine if notifications supported by browser */
if(window.webkitNotifications){
	var havePermission = window.webkitNotifications.checkPermission();
	if (havePermission !== 0) {
 		window.webkitNotifications.requestPermission();
 	}
} else if (Notification && Notification !== "granted") {
	Notification.requestPermission(function(status) {
		if (Notification.permission !== status) {
			return Notification.permission = status;
		}
	});
}